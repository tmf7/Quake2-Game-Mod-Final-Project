<g_weapon.c>
static void check_dodge (edict_t *self, vec3_t start, vec3_t dir, int speed)
	tr.ent->monsterinfo.dodge (tr.ent, self, eta);

<g_monster.c>
void monster_start_go (edict_t *self)
	self->monsterinfo.walk (self);
	self->monsterinfo.stand (self);
	self->think = monster_think;

<g_misc.c> //??? weird
void path_corner_touch (edict_t *self, edict_t *other, cplane_t *plane, csurface_t *surf)
	other->monsterinfo.stand (other);
void point_combat_touch (edict_t *self, edict_t *other, cplane_t *plane, csurface_t *surf)
	other->monsterinfo.stand (other);


<g_local.h> 
****These are the functions to override via player input if possesed******
 monsterinfo_t
	void.		(*stand)(edict_t *self);
	void.		(*idle)(edict_t *self);
	void.		(*search)(edict_t *self);
	void.		(*walk)(edict_t *self);
	void.		(*run)(edict_t *self);
	void.		(*dodge)(edict_t *self, edict_t *other, float eta);		//only one outside g_ai.c
	void.		(*attack)(edict_t *self);
	void.		(*melee)(edict_t *self);
	void.		(*sight)(edict_t *self, edict_t *other);
	qboolean.	(*checkattack)(edict_t *self);
______________________________________________________________________
<m_gunner.c>
// upon spawning, the current move (frame function calls) is set
// it runs through (eg) ai_stand repeatedly
// at some point in ai_stand the monsterinfo.attack function is called
// m_gunner has its attack function set the new frame cycle (and hence new function calls)

void SP_monster_gunner (edict_t *self)
	gi.linkentity (self);

	self->monsterinfo.currentmove = &gunner_move_stand;	
	self->monsterinfo.scale = MODEL_SCALE;

	walkmonster_start (self);

//////////////////////////POSSIBLY///UNLIKELY//////
self->monsterinfo.currentmove is monster specific (not currently in g_ai.c)
use player input to set the currentmove, goal, and target (like bauldur's gate: where the player clicks on the screen)
	somehow check the depth to the point clicked on/pointed at
	and do a radius check for entities in that area to attack
	attack via ranged if not within proximity....and if a ranged attack exists...ugh?


[from quake4 code]
bool idEditEntities::SelectEntity( const idVec3 &origin, const idVec3 &dir, const idEntity *skip ) {
	end = origin + dir * 4096.0f;
print the distance to a really long trace's first hit along the view direction from the player origin

//////////////////////////////
_________________________________________________________________________________PRIMARILY THESE__________________
<g_ai.c>
void ai_stand (edict_t *self, float dist)
void ai_run (edict_t *self, float dist)
void ai_walk (edict_t *self, float dist)
void ai_run_melee(edict_t *self)
void ai_run_missile(edict_t *self)

void HuntTarget (edict_t *self)
void FoundTarget (edict_t *self)
qboolean FindTarget (edict_t *self)

qboolean M_CheckAttack (edict_t *self)
qboolean ai_checkattack (edict_t *self, float dist)

int range (edict_t *self, edict_t *other)		//interesting helper function for attack range
<p_client.c>	float	PlayersRangeFromSpot (edict_t *spot)
_____________________________________________________
POSSESION PLAN:
->freeze the player movement and attacks

->leave function pointer SETTING alone, only look for function CALLS

->FORCE ai decision points if possesed flag is set AND player inputs a cmd
	->pass the movement direction (crouch, jump?, walk, run)


debug_drawline(self.origin, self.last_sighting, 152);		//not actually defined anywhere, weird
